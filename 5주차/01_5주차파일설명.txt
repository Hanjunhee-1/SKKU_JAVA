이번 강의에서는 인터페이스와 추상클래스 그리고 상속에 대해 배웠다.

인터페이스와 추상클래스의 차이가 무엇인지 가끔 헷갈리곤 했는데 오늘 강의를 통해 확실히 알게 되었다.


클래스는 상속이라는 것을 받을 수 있는데 어떤 부모 클래스로부터 부모 클래스가 가지는 모든 property 를 
상속받은 자식클래스에서도 접근할 수 있는것이다. 덕분에 코드의 중복을 지울 수도 있고 각 클래스의 역할을 
명확하게 정의해줄수 있다는 장점이 있다. 

하지만 클래스는 다중상속이 불가능하다. 예를 들면 A 라는 클래스와 B 라는 클래스가 존재한다고 하자.
C 라는 클래스를 새로 만들어야 하는데 해당 클래스는 A 클래스와 B 클래스의 property 가 모두 필요하다. 
그래서 
```
    class C extends A, B {
        // something
    }
```
이런 식으로 해주려고 했는데 java 에서는 다중상속을 지원하지 않는다. 다중상속을 지원하지 않는 이유는 어떤 메소드에 대해
출처가 불명확해지기 때문이라고 한다. 다중상속을 사용하면 이런 단점이 있기도 하지만 편하기 때문에 사용하고 싶은데 이때 사용하는 것이 바로
인터페이스이다.

인터페이스와 추상클래스 모두 어떤 변수나 메소드에 대해 선언만 하고 내용은 이것을 상속받을 자식에서 명시해주어야 한다.
인터페이스와 추상클래스의 생성은 각각 다음과 같다.
```
    // 인터페이스 생성 예시
    interface I {
        public abstract void test();
    }
```
```
    // 추상클래스 생성 예시
    abstract class A {
        abstract void test();
    }
```
위와 같이 생성을 했다면 상속을 받을 때는 interface 를 상속받는다면 implements 를 사용하고 추상클래스를 상속받는다면
extends 를 사용한다. 
그리고 상속받은 자식 클래스에서는 반드시 abstract 라고 되어있는 메소드를 오버라이드 해주어야 자식 클래스의 인스턴스를
생성할 수 있게된다. 